import Head from "next/head";
import Image from "next/image";
import { ApolloClient, InMemoryCache, gql } from "@apollo/client";
import {
  Heading,
  Box,
  Flex,
  Input,
  IconButton,
  useToast,
  Stack,
  Spinner,
} from "@chakra-ui/react";

import Character from "../components/characters";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import { CloseIcon, SearchIcon } from "@chakra-ui/icons";

export const RICK_AND_MORTY_GRAPHQL = "https://rickandmortyapi.com/graphql/";

export default function Home(props) {
  const [loading, setLoading] = useState(false);
  const initialState = props;
  const [characters, setCharacters] = useState(initialState.characters);
  const [search, setSearch] = useState("");
  const toast = useToast();

  async function handleSubmitForm(e) {
    e.preventDefault();
    setLoading(true);
    const res = await fetch("/api/search-characters", {
      method: "POST",
      body: search,
    });
    const { characters, error } = await res.json();
    if (error) {
      toast({
        position: "bottom",
        title: "An error occured",
        description: error,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } else {
      setCharacters(characters);
    }
    setLoading(false);
  }
  function handleResetButton() {
    setSearch("");
    setCharacters(initialState.characters);
  }

  return (
    <Flex direction="column" justify="center" align="center">
      <Head>
        <title>Rick and morty app</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box mb={4} flexDirection="column" align="center" justify="center" py={8}>
        <Heading as="h1" size="2xl" mb={16}>
          Rick and Morty Characters
        </Heading>
        <form onSubmit={handleSubmitForm}>
          <Stack maxWidth="350px" width="100%" isInline mb={8}>
            <Input
              placeholder="Search"
              value={search}
              border="none"
              onChange={(e) => setSearch(e.target.value)}
            />
            <IconButton
              colorScheme="blue"
              aria-label="Search Database"
              icon={<SearchIcon />}
              disabled={search === ""}
              type="submit"
            />
            <IconButton
              colorScheme="red"
              aria-label="Reset Button"
              icon={<CloseIcon />}
              disabled={search === ""}
              onClick={handleResetButton}
            />
          </Stack>
        </form>

        {loading ? (
          <Spinner size="xl" />
        ) : (
          <Character characters={characters} />
        )}
      </Box>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </Flex>
  );
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: RICK_AND_MORTY_GRAPHQL,
    cache: new InMemoryCache(),
  });
  const { data } = await client.query({
    query: gql`
      query {
        characters(page: 1) {
          info {
            count
            pages
          }
          results {
            name
            id
            location {
              name
              id
            }
            image
            origin {
              name
              id
            }
            episode {
              id
              episode
              air_date
            }
          }
        }
      }
    `,
  });
  return {
    props: {
      characters: data.characters.results,
    },
  };
}
